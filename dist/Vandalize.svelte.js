import './Vandalize.svelte.css.proxy.js';
/* src/Vandalize.svelte generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text
} from "../_snowpack/pkg/svelte/internal.js";

import { ipfsAdd, toGateway } from "./ipfs.js";

function create_fragment(ctx) {
	let div1;
	let div0;
	let h2;
	let t0_value = /*fromToken*/ ctx[0].metadata.name + "";
	let t0;
	let t1;
	let code;
	let t2;
	let t3_value = /*fromToken*/ ctx[0].uri + "";
	let t3;
	let t4;
	let pre0;
	let t5_value = JSON.stringify(/*fromToken*/ ctx[0].metadata, null, 4) + "";
	let t5;
	let t6;
	let button;
	let t8;
	let input;
	let t9;
	let label;
	let t11;
	let img;
	let img_src_value;
	let img_alt_value;
	let t12;
	let pre1;
	let t13_value = /*logs*/ ctx[1].join("\n") + "";
	let t13;
	let mounted;
	let dispose;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			code = element("code");
			t2 = text("Token URI: ");
			t3 = text(t3_value);
			t4 = space();
			pre0 = element("pre");
			t5 = text(t5_value);
			t6 = space();
			button = element("button");
			button.textContent = "Liberate";
			t8 = space();
			input = element("input");
			t9 = space();
			label = element("label");
			label.textContent = "Vandalize";
			t11 = space();
			img = element("img");
			t12 = space();
			pre1 = element("pre");
			t13 = text(t13_value);
			attr(div0, "class", "metadata svelte-gsbp06");
			attr(input, "type", "file");
			attr(input, "id", "image-file");
			attr(input, "name", "image");
			attr(label, "for", "image-file");
			if (img.src !== (img_src_value = /*fromToken*/ ctx[0].metadata.image)) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*fromToken*/ ctx[0].metadata.description);
			attr(img, "class", "svelte-gsbp06");
			attr(div1, "class", "svelte-gsbp06");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, h2);
			append(h2, t0);
			append(div0, t1);
			append(div0, code);
			append(code, t2);
			append(code, t3);
			append(div0, t4);
			append(div0, pre0);
			append(pre0, t5);
			append(div1, t6);
			append(div1, button);
			append(div1, t8);
			append(div1, input);
			/*input_binding*/ ctx[8](input);
			append(div1, t9);
			append(div1, label);
			append(div1, t11);
			append(div1, img);
			/*img_binding*/ ctx[10](img);
			append(div1, t12);
			append(div1, pre1);
			append(pre1, t13);

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[7]),
					listen(input, "change", /*change_handler*/ ctx[9])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*fromToken*/ 1 && t0_value !== (t0_value = /*fromToken*/ ctx[0].metadata.name + "")) set_data(t0, t0_value);
			if (dirty & /*fromToken*/ 1 && t3_value !== (t3_value = /*fromToken*/ ctx[0].uri + "")) set_data(t3, t3_value);
			if (dirty & /*fromToken*/ 1 && t5_value !== (t5_value = JSON.stringify(/*fromToken*/ ctx[0].metadata, null, 4) + "")) set_data(t5, t5_value);

			if (dirty & /*fromToken*/ 1 && img.src !== (img_src_value = /*fromToken*/ ctx[0].metadata.image)) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*fromToken*/ 1 && img_alt_value !== (img_alt_value = /*fromToken*/ ctx[0].metadata.description)) {
				attr(img, "alt", img_alt_value);
			}

			if (dirty & /*logs*/ 2 && t13_value !== (t13_value = /*logs*/ ctx[1].join("\n") + "")) set_data(t13, t13_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			/*input_binding*/ ctx[8](null);
			/*img_binding*/ ctx[10](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	let { fromToken } = $$props;
	let { vandalizer } = $$props;
	let logs = [];
	let imageElement;
	let uploadElement;

	function log(s) {
		console.log(s);
		$$invalidate(1, logs = [...logs, s]);
	}

	async function handleLiberate() {
		log(`Get original image from ${fromToken.metadata.image}`);
		const imageReq = await fetch(fromToken.metadata.image);
		const image = await imageReq.blob();
		await handleVandalize(image);
	}

	async function handleVandalize(image) {
		let size;

		if (image instanceof ArrayBuffer) {
			size = image.byteLength;
		} else {
			size = image.size;
		}

		log(`Got image, size ${size} bytes`);
		const cid = await ipfsAdd(image);
		log(`Image uploaded to IPFS, CID ${cid}`);
		log(`Making metadata PERMANENT!)`);

		const metadata = {
			...fromToken.metadata,
			image: toGateway(cid)
		};

		log(`New metadata`);
		log(JSON.stringify(metadata, null, 4));
		const metadataCid = await ipfsAdd(JSON.stringify(metadata, null, 4));
		log(`Metadata uploaded to IPFS, CID ${metadataCid}`);
		log("Ask our valued customer to sign the approve tx");
		const approveTx = await fromToken.contract.approve(vandalizer.address, fromToken.id);
		log(`Approve tx hash ${approveTx.hash}`);
		const approveReceipt = await approveTx.wait();
		log(`Tx included in block ${approveReceipt.blockNumber}`);
		log(`${fromToken.contract.address}, ${fromToken.id}, ${toGateway(metadataCid)}`);
		await vandalizer.vandalize(fromToken.contract.address, fromToken.id, toGateway(metadataCid));
	}

	async function handleUpload() {
		if (!uploadElement.files) {
			return;
		}

		const fileReaderDataUrl = new FileReader();
		const fileReaderBinary = new FileReader();
		const [file] = uploadElement.files;

		fileReaderDataUrl.onload = () => {
			$$invalidate(2, imageElement.src = fileReaderDataUrl.result, imageElement);
		};

		fileReaderDataUrl.readAsDataURL(file);

		fileReaderBinary.onload = async () => {
			try {
				await handleVandalize(fileReaderBinary.result);
			} catch(e) {
				console.error(e);
				throw e;
			}
		};

		fileReaderBinary.readAsArrayBuffer(file);
	}

	const click_handler = () => handleLiberate();

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			uploadElement = $$value;
			$$invalidate(3, uploadElement);
		});
	}

	const change_handler = e => handleUpload();

	function img_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			imageElement = $$value;
			$$invalidate(2, imageElement);
		});
	}

	$$self.$$set = $$props => {
		if ("fromToken" in $$props) $$invalidate(0, fromToken = $$props.fromToken);
		if ("vandalizer" in $$props) $$invalidate(6, vandalizer = $$props.vandalizer);
	};

	return [
		fromToken,
		logs,
		imageElement,
		uploadElement,
		handleLiberate,
		handleUpload,
		vandalizer,
		click_handler,
		input_binding,
		change_handler,
		img_binding
	];
}

class Vandalize extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { fromToken: 0, vandalizer: 6 });
	}
}

export default Vandalize;