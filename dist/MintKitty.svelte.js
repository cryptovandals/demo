/* src/MintKitty.svelte generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal
} from "../_snowpack/pkg/svelte/internal.js";

import { ipfsAdd, toGateway } from "./ipfs.js";

function create_fragment(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Mint Kitty";
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

const KITTY_BASE_URL = "https://img.cryptokitties.co/0x06012c8cf97bead5deae237070f9587f8e7a266d/";

function randomInteger(min, max) {
	return Math.floor(Math.random() * (max - min + 1)) + min;
}

function generateKitty() {
	const id = randomInteger(1, 100000);

	return {
		id,
		name: "Kitty #" + id,
		description: "A kitty!",
		image: KITTY_BASE_URL + id + ".png"
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	let { kitty } = $$props;

	async function handleMint() {
		const metadata = generateKitty();
		const cid = await ipfsAdd(JSON.stringify(metadata, null, 4));
		await kitty.mint(toGateway(cid));
	}

	const click_handler = () => handleMint();

	$$self.$$set = $$props => {
		if ("kitty" in $$props) $$invalidate(1, kitty = $$props.kitty);
	};

	return [handleMint, kitty, click_handler];
}

class MintKitty extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { kitty: 1 });
	}
}

export default MintKitty;