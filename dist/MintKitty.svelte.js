/* src/MintKitty.svelte generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	text
} from "../_snowpack/pkg/svelte/internal.js";

import { ipfsAdd, toGateway } from "./ipfs.js";

function create_else_block(ctx) {
	let t;

	return {
		c() {
			t = text("Minting, please wait");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (35:4) {#if state === "idle"}
function create_if_block(ctx) {
	let t;

	return {
		c() {
			t = text("Mint test Kitty");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let button;
	let span;
	let button_disabled_value;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*state*/ ctx[0] === "idle") return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			button = element("button");
			span = element("span");
			if_block.c();
			attr(button, "class", "button-shadow");
			button.disabled = button_disabled_value = /*state*/ ctx[0] === "working";
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, span);
			if_block.m(span, null);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(span, null);
				}
			}

			if (dirty & /*state*/ 1 && button_disabled_value !== (button_disabled_value = /*state*/ ctx[0] === "working")) {
				button.disabled = button_disabled_value;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(button);
			if_block.d();
			mounted = false;
			dispose();
		}
	};
}

const KITTY_BASE_URL = "https://img.cryptokitties.co/0x06012c8cf97bead5deae237070f9587f8e7a266d/";

function randomInteger(min, max) {
	return Math.floor(Math.random() * (max - min + 1)) + min;
}

function generateKitty() {
	const id = randomInteger(1, 100000);

	return {
		id,
		name: "Kitty #" + id,
		description: "A kitty!",
		image: KITTY_BASE_URL + id + ".png"
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	let { kitty } = $$props;
	let state = "idle";

	async function handleMint() {
		$$invalidate(0, state = "working");
		const metadata = generateKitty();
		const cid = await ipfsAdd(JSON.stringify(metadata, null, 4));
		const tx = await kitty.mint(toGateway(cid));
		await tx.wait();
		$$invalidate(0, state = "idle");
	}

	const click_handler = () => handleMint();

	$$self.$$set = $$props => {
		if ("kitty" in $$props) $$invalidate(2, kitty = $$props.kitty);
	};

	return [state, handleMint, kitty, click_handler];
}

class MintKitty extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { kitty: 2 });
	}
}

export default MintKitty;